@import './_mixin.less';

html:not([lang]), html[lang=""]{
	#dangerBefore('<html> needs [lang="…"]');
}


/*
Empty elements.
==================================================
*/
style:not([src]), script, title {
	&:empty {
		#dangerBefore('Those element should not be empty');
	}
}

body link {
	#dangerBefore('<body> should not contain <link> [href="'attr(href) '"]');
}

abbr:not([title]) {
	#danger('<abbr> needs [title="…"]');
}

a:not([title]), a[title=""] {
  #danger('<a> needs [title="…"]');
}
a[target]:not([rel*="noopener"]), a[target]:not([rel*="noreferrer"]) {
  #danger('[target="…"] also needs [rel="noopener"] or [rel="noopener noreferrer"]')
}


[id=""] {
	#danger('[id=""] should not be empty');
}

/*
img
==================================================
*/
img:not([src]), img[src=""] {
  #danger('<img> needs [src="…"]');
}

/*
Invalid `figcaption` nesting.
==================================================
*/
:not(figure) > figcaption {
	#danger("<figcaption> must be a child of <figure>");
}

figure > figcaption:not(:first-child):not(:last-child), figure > figcaption:not(:first-child):not(:last-child) ~:last-child:not(figcaption) {
	#danger("<figcaption> must be first/last child of <figure>");
}

figure > figcaption:not(:first-of-type) {
	#danger(~'"<figure> should only contain one <figcaption>" !important');
}

/*
Invalid `li` nesting.
==================================================
*/
:not(ul):not(ol) > li {
  #danger("<li> is missing a parent <ul> or <ol>");
}

ol >:not(li), ul >:not(li) {
  #danger("Immediate child of <ol> or <ul> must be <li>");
}

/*
Invalid `dd` nesting.
==================================================
*/
:not(dl) dd, :not(dl) dt {
  #danger("<dd> is missing a parent <dl> or <div>");
}

dl >:not(dt):not(dd):not(div) {
  #danger("Immediate child of <dl> must be <dt>, <dd>, or <div>");
}

dl dd:first-child {
  #danger("<dd> can not be: first-child of <dl>");
}

/*
table
==================================================
*/
th, td {
  &[abbr], &[align], &[axis], &[char], &[charoff], &[scope], &[valign] {
    #danger('Those attrs are obsolete in html5');
  }
}

/*
Invalid `legend` position in `fieldset`.
==================================================
*/
fieldset >:not(legend):first-child {
  #danger("Invalid: first-child of <legend>");
}

:not(fieldset) > legend, fieldset > legend:not(:first-child) {
  #danger("<legend> must be: first-child of <fieldset>");
}

/*
form
==================================================
*/
input[type="radio"]:not([name]), input[type="radio"][name=""] {
  #danger('Radios without name="…"');
}

label:not([for]), label[for=""] {
  #danger('<label> needs [for="…"]');
}

input:not([type]), input[type=""] {
  #danger('<input> need [type="…"]');
}

button:not([type]), button[type=""]  {
  #danger('<button> need [type="…"]');
}